{"ast":null,"code":"var _jsxFileName = \"/Users/hyeokjung.kim/Flatiron-LI/010620/54-redux/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'; // IMPORT FOR REDUX STUFF\n\nimport { createStore } from 'redux'; // createStore is a () => {}\n// the return value of the reducer is going to be the state\n// the reduce is the brains of your application\n// it determines how state should be changed\n\nlet initialState = {\n  number: 20,\n  chicken: \"Yes\"\n};\n\nconst reducer = (state = initialState, action) => {\n  // console.log(action, \"INSIDE THE REDUCER\");\n  // console.log(state, \"THIS IS THE STATE\");\n  switch (action.type) {\n    case \"ADD_NUMBER\":\n      // DO SOME LOGIC HERE\n      let newNumber = state.number + action.payload;\n      return { ...state,\n        number: newNumber\n      };\n\n    case \"SUBTRACT_NUMBER\":\n      return {\n        number: -1000\n      };\n\n    default:\n      return state;\n  }\n};\n\nlet storeObject = createStore(reducer); // console.log(storeObject);\n\nconsole.log(storeObject.getState(), \"BEFORE\"); // CHANGE THE NUMBER TO ADD BY 7\n\nlet actionObject = {\n  type: \"ADD_NUMBER\",\n  payload: 8000\n}; // Dispatching an action invokes the reducer function\n\nstoreObject.dispatch(actionObject);\nconsole.log(storeObject.getState(), \"AFTER\"); // debugger;\n\nReactDOM.render( /*#__PURE__*/React.createElement(React.StrictMode, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }\n})), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/hyeokjung.kim/Flatiron-LI/010620/54-redux/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","createStore","initialState","number","chicken","reducer","state","action","type","newNumber","payload","storeObject","console","log","getState","actionObject","dispatch","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B,C,CAGA;;AACA,SAASC,WAAT,QAA4B,OAA5B,C,CAEA;AAEA;AACA;AACE;;AAEF,IAAIC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,EADS;AAEjBC,EAAAA,OAAO,EAAE;AAFQ,CAAnB;;AAKA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAChD;AACA;AACA,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,YAAL;AACE;AACA,UAAIC,SAAS,GAAGH,KAAK,CAACH,MAAN,GAAeI,MAAM,CAACG,OAAtC;AACA,aAAO,EACL,GAAGJ,KADE;AAELH,QAAAA,MAAM,EAAEM;AAFH,OAAP;;AAIF,SAAK,iBAAL;AACE,aAAO;AAACN,QAAAA,MAAM,EAAE,CAAC;AAAV,OAAP;;AACF;AACE,aAAOG,KAAP;AAXJ;AAcD,CAjBD;;AAmBA,IAAIK,WAAW,GAAGV,WAAW,CAACI,OAAD,CAA7B,C,CAEA;;AACAO,OAAO,CAACC,GAAR,CAAYF,WAAW,CAACG,QAAZ,EAAZ,EAAoC,QAApC,E,CAEA;;AACA,IAAIC,YAAY,GAAG;AACjBP,EAAAA,IAAI,EAAE,YADW;AAEjBE,EAAAA,OAAO,EAAE;AAFQ,CAAnB,C,CAKA;;AACAC,WAAW,CAACK,QAAZ,CAAqBD,YAArB;AAGAH,OAAO,CAACC,GAAR,CAAYF,WAAW,CAACG,QAAZ,EAAZ,EAAoC,OAApC,E,CAEA;;AAmBAhB,QAAQ,CAACmB,MAAT,eACE,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,EAIEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF,E,CAOA;AACA;AACA;;AACAnB,aAAa,CAACoB,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n// IMPORT FOR REDUX STUFF\nimport { createStore } from 'redux'\n\n// createStore is a () => {}\n\n// the return value of the reducer is going to be the state\n// the reduce is the brains of your application\n  // it determines how state should be changed\n\nlet initialState = {\n  number: 20,\n  chicken: \"Yes\"\n}\n\nconst reducer = (state = initialState, action) => {\n  // console.log(action, \"INSIDE THE REDUCER\");\n  // console.log(state, \"THIS IS THE STATE\");\n  switch (action.type) {\n    case \"ADD_NUMBER\":\n      // DO SOME LOGIC HERE\n      let newNumber = state.number + action.payload\n      return {\n        ...state,\n        number: newNumber\n      }\n    case \"SUBTRACT_NUMBER\":\n      return {number: -1000}\n    default:\n      return state\n  }\n\n}\n\nlet storeObject = createStore(reducer)\n\n// console.log(storeObject);\nconsole.log(storeObject.getState(), \"BEFORE\")\n\n// CHANGE THE NUMBER TO ADD BY 7\nlet actionObject = {\n  type: \"ADD_NUMBER\",\n  payload: 8000\n}\n\n// Dispatching an action invokes the reducer function\nstoreObject.dispatch(actionObject)\n\n\nconsole.log(storeObject.getState(), \"AFTER\")\n\n// debugger;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}